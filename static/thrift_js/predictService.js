//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./client_types');
//HELPER FUNCTIONS AND STRUCTURES

predictService_seg_predict_images_task1_args = function(args) {
  this.image_paths = null;
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths;
    }
  }
};
predictService_seg_predict_images_task1_args.prototype = {};
predictService_seg_predict_images_task1_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.image_paths = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.image_paths.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_seg_predict_images_task1_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_seg_predict_images_task1_args');
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length);
    for (var iter7 in this.image_paths)
    {
      if (this.image_paths.hasOwnProperty(iter7))
      {
        iter7 = this.image_paths[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_seg_predict_images_task1_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_seg_predict_images_task1_result.prototype = {};
predictService_seg_predict_images_task1_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_seg_predict_images_task1_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_seg_predict_images_task1_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_seg_predict_images_task2_args = function(args) {
  this.image_paths = null;
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths;
    }
  }
};
predictService_seg_predict_images_task2_args.prototype = {};
predictService_seg_predict_images_task2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.image_paths = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.image_paths.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_seg_predict_images_task2_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_seg_predict_images_task2_args');
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length);
    for (var iter15 in this.image_paths)
    {
      if (this.image_paths.hasOwnProperty(iter15))
      {
        iter15 = this.image_paths[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_seg_predict_images_task2_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_seg_predict_images_task2_result.prototype = {};
predictService_seg_predict_images_task2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_seg_predict_images_task2_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_seg_predict_images_task2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_cls_predict_images_task3_args = function(args) {
  this.image_paths = null;
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths;
    }
  }
};
predictService_cls_predict_images_task3_args.prototype = {};
predictService_cls_predict_images_task3_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.image_paths = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.image_paths.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_cls_predict_images_task3_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_cls_predict_images_task3_args');
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length);
    for (var iter23 in this.image_paths)
    {
      if (this.image_paths.hasOwnProperty(iter23))
      {
        iter23 = this.image_paths[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_cls_predict_images_task3_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_cls_predict_images_task3_result.prototype = {};
predictService_cls_predict_images_task3_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_cls_predict_images_task3_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_cls_predict_images_task3_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_cls_predict_images_task4_args = function(args) {
  this.image_paths = null;
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths;
    }
  }
};
predictService_cls_predict_images_task4_args.prototype = {};
predictService_cls_predict_images_task4_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.image_paths = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.image_paths.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_cls_predict_images_task4_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_cls_predict_images_task4_args');
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length);
    for (var iter31 in this.image_paths)
    {
      if (this.image_paths.hasOwnProperty(iter31))
      {
        iter31 = this.image_paths[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_cls_predict_images_task4_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_cls_predict_images_task4_result.prototype = {};
predictService_cls_predict_images_task4_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_cls_predict_images_task4_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_cls_predict_images_task4_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task1_result_json_path_args = function(args) {
};
predictService_get_task1_result_json_path_args.prototype = {};
predictService_get_task1_result_json_path_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task1_result_json_path_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task1_result_json_path_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task1_result_json_path_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_get_task1_result_json_path_result.prototype = {};
predictService_get_task1_result_json_path_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task1_result_json_path_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task1_result_json_path_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task2_result_json_path_args = function(args) {
};
predictService_get_task2_result_json_path_args.prototype = {};
predictService_get_task2_result_json_path_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task2_result_json_path_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task2_result_json_path_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task2_result_json_path_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_get_task2_result_json_path_result.prototype = {};
predictService_get_task2_result_json_path_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task2_result_json_path_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task2_result_json_path_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task3_result_json_path_args = function(args) {
};
predictService_get_task3_result_json_path_args.prototype = {};
predictService_get_task3_result_json_path_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task3_result_json_path_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task3_result_json_path_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task3_result_json_path_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_get_task3_result_json_path_result.prototype = {};
predictService_get_task3_result_json_path_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task3_result_json_path_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task3_result_json_path_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task4_result_json_path_args = function(args) {
};
predictService_get_task4_result_json_path_args.prototype = {};
predictService_get_task4_result_json_path_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task4_result_json_path_args.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task4_result_json_path_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictService_get_task4_result_json_path_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
predictService_get_task4_result_json_path_result.prototype = {};
predictService_get_task4_result_json_path_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

predictService_get_task4_result_json_path_result.prototype.write = function(output) {
  output.writeStructBegin('predictService_get_task4_result_json_path_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

predictServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
predictServiceClient.prototype = {};
predictServiceClient.prototype.seg_predict_images_task1 = function(image_paths, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_seg_predict_images_task1(image_paths);
};

predictServiceClient.prototype.send_seg_predict_images_task1 = function(image_paths) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('seg_predict_images_task1', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_seg_predict_images_task1_args();
  args.image_paths = image_paths;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_seg_predict_images_task1 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_seg_predict_images_task1_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('seg_predict_images_task1 failed: unknown result');
};
predictServiceClient.prototype.seg_predict_images_task2 = function(image_paths, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_seg_predict_images_task2(image_paths);
};

predictServiceClient.prototype.send_seg_predict_images_task2 = function(image_paths) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('seg_predict_images_task2', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_seg_predict_images_task2_args();
  args.image_paths = image_paths;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_seg_predict_images_task2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_seg_predict_images_task2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('seg_predict_images_task2 failed: unknown result');
};
predictServiceClient.prototype.cls_predict_images_task3 = function(image_paths, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cls_predict_images_task3(image_paths);
};

predictServiceClient.prototype.send_cls_predict_images_task3 = function(image_paths) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cls_predict_images_task3', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_cls_predict_images_task3_args();
  args.image_paths = image_paths;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_cls_predict_images_task3 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_cls_predict_images_task3_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cls_predict_images_task3 failed: unknown result');
};
predictServiceClient.prototype.cls_predict_images_task4 = function(image_paths, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cls_predict_images_task4(image_paths);
};

predictServiceClient.prototype.send_cls_predict_images_task4 = function(image_paths) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cls_predict_images_task4', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_cls_predict_images_task4_args();
  args.image_paths = image_paths;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_cls_predict_images_task4 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_cls_predict_images_task4_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cls_predict_images_task4 failed: unknown result');
};
predictServiceClient.prototype.get_task1_result_json_path = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_task1_result_json_path();
};

predictServiceClient.prototype.send_get_task1_result_json_path = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_task1_result_json_path', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_get_task1_result_json_path_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_get_task1_result_json_path = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_get_task1_result_json_path_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_task1_result_json_path failed: unknown result');
};
predictServiceClient.prototype.get_task2_result_json_path = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_task2_result_json_path();
};

predictServiceClient.prototype.send_get_task2_result_json_path = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_task2_result_json_path', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_get_task2_result_json_path_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_get_task2_result_json_path = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_get_task2_result_json_path_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_task2_result_json_path failed: unknown result');
};
predictServiceClient.prototype.get_task3_result_json_path = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_task3_result_json_path();
};

predictServiceClient.prototype.send_get_task3_result_json_path = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_task3_result_json_path', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_get_task3_result_json_path_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_get_task3_result_json_path = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_get_task3_result_json_path_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_task3_result_json_path failed: unknown result');
};
predictServiceClient.prototype.get_task4_result_json_path = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_task4_result_json_path();
};

predictServiceClient.prototype.send_get_task4_result_json_path = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_task4_result_json_path', Thrift.MessageType.CALL, this.seqid);
  var args = new predictService_get_task4_result_json_path_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

predictServiceClient.prototype.recv_get_task4_result_json_path = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new predictService_get_task4_result_json_path_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_task4_result_json_path failed: unknown result');
};
predictServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
predictServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

predictServiceProcessor.prototype.process_seg_predict_images_task1 = function(seqid, input, output) {
  var args = new predictService_seg_predict_images_task1_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.seg_predict_images_task1(args.image_paths, function (err, result) {
    var result = new predictService_seg_predict_images_task1_result((err != null ? err : {success: result}));
    output.writeMessageBegin("seg_predict_images_task1", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_seg_predict_images_task2 = function(seqid, input, output) {
  var args = new predictService_seg_predict_images_task2_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.seg_predict_images_task2(args.image_paths, function (err, result) {
    var result = new predictService_seg_predict_images_task2_result((err != null ? err : {success: result}));
    output.writeMessageBegin("seg_predict_images_task2", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_cls_predict_images_task3 = function(seqid, input, output) {
  var args = new predictService_cls_predict_images_task3_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.cls_predict_images_task3(args.image_paths, function (err, result) {
    var result = new predictService_cls_predict_images_task3_result((err != null ? err : {success: result}));
    output.writeMessageBegin("cls_predict_images_task3", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_cls_predict_images_task4 = function(seqid, input, output) {
  var args = new predictService_cls_predict_images_task4_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.cls_predict_images_task4(args.image_paths, function (err, result) {
    var result = new predictService_cls_predict_images_task4_result((err != null ? err : {success: result}));
    output.writeMessageBegin("cls_predict_images_task4", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_get_task1_result_json_path = function(seqid, input, output) {
  var args = new predictService_get_task1_result_json_path_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_task1_result_json_path(function (err, result) {
    var result = new predictService_get_task1_result_json_path_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_task1_result_json_path", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_get_task2_result_json_path = function(seqid, input, output) {
  var args = new predictService_get_task2_result_json_path_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_task2_result_json_path(function (err, result) {
    var result = new predictService_get_task2_result_json_path_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_task2_result_json_path", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_get_task3_result_json_path = function(seqid, input, output) {
  var args = new predictService_get_task3_result_json_path_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_task3_result_json_path(function (err, result) {
    var result = new predictService_get_task3_result_json_path_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_task3_result_json_path", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

predictServiceProcessor.prototype.process_get_task4_result_json_path = function(seqid, input, output) {
  var args = new predictService_get_task4_result_json_path_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_task4_result_json_path(function (err, result) {
    var result = new predictService_get_task4_result_json_path_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_task4_result_json_path", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

